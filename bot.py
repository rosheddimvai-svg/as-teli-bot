import logging
from aiogram import Bot, Dispatcher, executor, types

# ---------------- CONFIG ----------------
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # ржПржЦрж╛ржирзЗ рждрзЛржорж╛рж░ ржмржЯ ржЯрзЛржХрзЗржи ржмрж╕рж╛ржУ
PRIVATE_CHANNEL_ID = -1002323042564   # ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓ ржЖржЗржбрж┐
ADMIN_USERNAME = "@Rs_Rezaul_99"     # ржПржбржорж┐ржи ржЗржЙржЬрж╛рж░ржирзЗржо
WEBAPP_URL = "https://as-official-channel.netlify.app/"  # ржУрзЯрзЗржм рж▓рж┐ржВржХ

# ----------------------------------------
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)


# ржЗржЙржЬрж╛рж░ ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
async def check_membership(user_id: int):
    try:
        member = await bot.get_chat_member(chat_id=PRIVATE_CHANNEL_ID, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            return True
        return False
    except:
        return False


# START ржХржорж╛ржирзНржб
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    is_member = await check_membership(user_id)

    if not is_member:
        text = (
            "тЭМ <b>Access Declined</b>\n\n"
            "ржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ VIP ржорзЗржорзНржмрж╛рж░ ржиржиред\n"
            f"ЁЯСЙ ржнрж┐ржЖржЗржкрж┐ ржорзЗржорзНржмрж╛рж░ рж╣рждрзЗ рж╣рж▓рзЗ ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: {ADMIN_USERNAME}"
        )
        await message.answer(text)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("ЁЯЪА Open Hack", url=WEBAPP_URL),
        )
        keyboard.add(
            types.InlineKeyboardButton("ЁЯУЮ ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ", url=f"https://t.me/{ADMIN_USERNAME.strip('@')}"),
        )
        keyboard.add(
            types.InlineKeyboardButton("ЁЯТО VIP рж╕рзБржмрж┐ржзрж╛рж╕ржорзВрж╣", callback_data="vip_info"),
        )

        text = (
            "тЬЕ <b>Access Granted!</b>\n\n"
            "ЁЯОЙ ржЕржнрж┐ржиржирзНржжржи! ржЖржкржирж┐ ржЖржорж╛ржжрзЗрж░ VIP ржорзЗржорзНржмрж╛рж░ред\n"
            "ЁЯФУ ржПржЦржи ржЖржкржирж┐ рж╣рзНржпрж╛ржХ рж╕рж┐рж╕рзНржЯрзЗржо ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред"
        )
        await message.answer(text, reply_markup=keyboard)


# Callback ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@dp.callback_query_handler(lambda c: c.data == "vip_info")
async def vip_info(callback: types.CallbackQuery):
    await callback.message.answer(
        "ЁЯТО <b>VIP ржорзЗржорзНржмрж╛рж░ржжрзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ рж╕рзБржмрж┐ржзрж╛:</b>\n"
        "1я╕ПтГг рж╕ржорзНржкрзВрж░рзНржг рж╣рзНржпрж╛ржХ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕\n"
        "2я╕ПтГг ржПржбржорж┐ржи рж╕рж╛ржкрзЛрж░рзНржЯ\n"
        "3я╕ПтГг ржПржХрзНрж╕ржХрзНрж▓рзБрж╕рж┐ржн ржЯрзБрж▓рж╕\n"
    )
    await callback.answer()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
